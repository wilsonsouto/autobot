import { {{pascalCaseProjectName}}Atendimento } from 'models/entities/{{camelCaseProjectName}}/{{pascalCaseProjectName}}Atendimento';
import { {{pascalCaseProjectName}}Survey } from 'models/entities/{{camelCaseProjectName}}/{{pascalCaseProjectName}}Survey';
import { CDRBaseEntity } from 'models/entities/cdrBaseEntity/CDRBaseEntity';
import { IMailing } from 'models/interfaces/{{camelCaseProjectName}}/IMailing';
import { IConversationTracing } from 'models/interfaces/IConversationTracing';
import { PhoneType } from 'models/types/PhoneType';
import RogueCategory from 'models/types/RogueCategory';
import { SolutionType } from 'models/types/SolutionType';
import Logger from 'utils/Logger';
import { isCellPhone } from 'utils/PhoneUtils';
import CDRLogDataFactory from './CDRLogDataFactory';

export class {{pascalCaseProjectName}}Factory extends CDRLogDataFactory {
  private name = '{{pascalCaseProjectName}}Factory';

  public makeAtendimento(tracing: IConversationTracing): CDRBaseEntity | {{pascalCaseProjectName}}Atendimento {
    Logger.info(`[${this.name}] building event...`);
    const atendimento: {{pascalCaseProjectName}}Atendimento = super.makeAtendimentoEvent(tracing);
    const mailing = this.getMailingFromTracing(tracing);

    atendimento.documento = mailing.cpf_cnpj;
    atendimento.origem = mailing.origem;
    atendimento.callId = mailing.callId;
    atendimento.seqnum = mailing.seqnum;
    atendimento.idCampanha = mailing.idCampanha;
    atendimento.nome = mailing.nome;
    atendimento.cliente = mailing.cliente;
    atendimento.ramal = mailing.ramal;

    atendimento.mailing = JSON.stringify(mailing);

    atendimento.telefone = String(mailing.ddd + mailing.telefone);
    atendimento.phoneType = this.resolvePhoneType(mailing.telefone);

    atendimento.clientCode = mailing.id || '';
    atendimento.phoneType = this.resolvePhoneType(mailing?.telefone);

    if (!atendimento.vdn) {
      atendimento.vdn = this.resolveVdnFromTracing(tracing);
    }

    atendimento.dna_resultConfidence = this.getConfidencesEvents(tracing);
    atendimento.solution = this.resolveSolutionType(tracing);
    atendimento.recordFilename = tracing.getEventsByCategory(RogueCategory.Dialog).pop()?.recordFilename || '';

    return atendimento;
  }

  public makeSurveys(tracing: IConversationTracing): Array<{{pascalCaseProjectName}}Survey> {
    const events = tracing.getEventsByCategory(RogueCategory.Identification);
    const mailing = this.getMailingFromTracing(tracing);
    const atendimento = this.makeAtendimentoEvent(tracing);

    const surveys = [] as {{pascalCaseProjectName}}Survey[];
    for (let i = 0; i < events.length; i++) {
      const ev = events[i];

      if (Object.keys(ev.identification).some(key => key.startsWith('NotaSatisfacao'))) {
        const surveyObj = ev.extractObjectWithPrefix('NotaSatisfacao') as any;
        surveyObj.conversationId = tracing.conversationId;
        surveyObj.question = mailing.question1;
        surveyObj.answer = mailing.notaSatisfacao !== '' ? mailing.notaSatisfacao : surveyObj.answer;
        surveyObj.surveyDate = atendimento.dtini;
        surveys[0] = surveyObj;
      }

      if (Object.keys(ev.identification).some(key => key.startsWith('NotaResolucao'))) {
        const surveyObj = ev.extractObjectWithPrefix('NotaResolucao') as any;
        surveyObj.conversationId = tracing.conversationId;
        surveyObj.question = mailing.question2;
        surveyObj.answer = mailing.notaResolucao !== '' ? mailing.notaResolucao : surveyObj.answer;
        surveyObj.surveyDate = atendimento.dtini;
        surveys[1] = surveyObj;
      }
    }

    return surveys as {{pascalCaseProjectName}}Survey[];
  }

  public getMailingFromTracing(tracing: IConversationTracing) {
    return tracing.identification as IMailing;
  }

  private resolvePhoneType(phone: string): PhoneType {
    return isCellPhone(phone) ? PhoneType.celular : PhoneType.fixo;
  }

  private resolveSolutionType(tracing: IConversationTracing): SolutionType {
    const solutionMap: { [key: string]: SolutionType } = {
      voice: SolutionType.vda,
      chat: SolutionType.whatsapp ?? SolutionType.WebChat,
    };
    return solutionMap[tracing.channel];
  }

  resolveVdnFromTracing(tracing: IConversationTracing): string | undefined {
    return tracing.getEventsByCategory(RogueCategory.Transfer).pop()?.transferTo;
  }
}
