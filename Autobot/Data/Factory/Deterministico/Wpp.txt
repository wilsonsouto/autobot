import CDRLogDataFactory from 'factories/CDRLogDataFactory';
import { CDRBaseEntity } from 'models/entities/cdrBaseEntity/CDRBaseEntity';
import { {{pascalCaseProjectName}}Atendimento } from 'models/entities/{{camelCaseProjectName}}/{{pascalCaseProjectName}}Atendimento';
import { IConversationTracing } from 'models/interfaces/IConversationTracing';
import { IMailing } from 'models/interfaces/{{camelCaseProjectName}}/IMailing';
import { PhoneType } from 'models/types/PhoneType';
import RogueCategory from 'models/types/RogueCategory';
import { SolutionType } from 'models/types/SolutionType';
import {{pascalCaseProjectName}}NocApiStatusRepository from 'repositories/{{camelCaseProjectName}}/{{pascalCaseProjectName}}NocApiStatusRepository';
import Logger from 'utils/Logger';
import { isCellPhone } from 'utils/PhoneUtils';

export class {{pascalCaseProjectName}}Factory extends CDRLogDataFactory {
  private name = '{{pascalCaseProjectName}}Factory';

  public async makeAtendimento(tracing: IConversationTracing): Promise<CDRBaseEntity | {{pascalCaseProjectName}}Atendimento> {
    Logger.info(`[${this.name}] building event...`);
    const atendimento: {{pascalCaseProjectName}}Atendimento & CDRBaseEntity = super.makeAtendimentoEvent(tracing);
    const mailing = this.getMailingFromTracing(tracing);
    const status = await this.resolveNocaiStatus(tracing);

    atendimento.clientCode = mailing.id || '';
    atendimento.documento = mailing.cpf_cnpj;
    atendimento.origem = mailing.origem;
    atendimento.callId = mailing.callId;
    atendimento.seqnum = mailing.seqnum;
    atendimento.idCampanha = mailing.idCampanha;
    atendimento.nome = mailing.nome;
    atendimento.cliente = mailing.cliente;
    atendimento.ramal = mailing.ramal;

    atendimento.mailing = JSON.stringify(mailing);
    atendimento.telefone = String(mailing.ddd + mailing.telefone);
    atendimento.phoneType = this.resolvePhoneType(mailing.telefone);

    if (!atendimento.vdn) {
      atendimento.vdn = this.resolveVdnFromTracing(tracing);
    }

    atendimento.dna_resultConfidence = this.getConfidencesEvents(tracing);
    atendimento.solution = this.resolveSolutionType(tracing);
    atendimento.recordFilename = tracing.getEventsByCategory(RogueCategory.Dialog).pop()?.recordFilename || '';

    atendimento.statusChamada = status.StatusChamada;
    atendimento.subStatusIVR = status.SubStatusIVR;
    atendimento.idEvento = status.IdEvento;
    atendimento.idServidor = tracing.getEventsByCategory(RogueCategory.Conversation).pop()?.hostname || '';

    return atendimento;
  }

  public async resolveNocaiStatus(tracing: IConversationTracing): Promise<{
    StatusChamada: string;
    SubStatusIVR: string;
    IdEvento: string;
  }> {
    const status = {
      StatusChamada: '',
      SubStatusIVR: '',
      IdEvento: '',
    };

    const nocStatusRepository = {{pascalCaseProjectName}}NocApiStatusRepository.getRepository();
    
    const { sptList } = this.parseScriptPointsFromTracing(tracing);
    const sptRanked = await this.rankSptForTabulation(sptList);
    const lastSpt = sptRanked[sptRanked.length - 1];

    Logger.info(`[${tracing.conversationId}] spt list: ${sptRanked.toString()}`);
    Logger.info(`[${tracing.conversationId}] last spt: ${lastSpt}`);
    
    let nocaiStatus = await nocStatusRepository.findOne({
      status_id: lastSpt as number,
    });

    if (!nocaiStatus) {
      Logger.error(`status_id not found for the spt: ${lastSpt}`);
      return status;
    }

    status.StatusChamada = nocaiStatus.statusChamada as string;
    status.SubStatusIVR = nocaiStatus.subStatusIVR as string;
    status.IdEvento = nocaiStatus.idEvento as string;

    return status;
  }

  public async rankSptForTabulation(sptList: number[]): Promise<number[]> {
    let result: number[] = [];
    let sptRank = new Map();
    let dictRank = new Map();
    dictRank.set('AVNOUVIR', 1);
    dictRank.set('AVCPC', 2);
    dictRank.set('AVTRANSFERE', 3);
    dictRank.set('AVPROMESSA', 4);
    dictRank.set('AVALEGA', 5);
    dictRank.set('AVACORDO', 6);
    const tabulacaoRepository = await {{pascalCaseProjectName}}NocApiStatusRepository.getRepository();
    for (let index = 0; index < sptList?.length; index++) {
      let rankSpt = await tabulacaoRepository.findOne({
        status_id: sptList[index] as number,
      });
      sptRank.set(sptList[index], dictRank.get(rankSpt?.statusChamada.toUpperCase() || '') || 0);
    }
    const sortSptRank = new Map([...sptRank].sort((a, b) => a[1] - b[1]));
    for (let [key, value] of sortSptRank) {
      result.push(key);
    }
    return result;
  }

  public getMailingFromTracing(tracing: IConversationTracing) {
    return tracing.identification as IMailing;
  }

  private resolvePhoneType(phone: string): PhoneType {
    return isCellPhone(phone) ? PhoneType.celular : PhoneType.fixo;
  }

  private resolveSolutionType(tracing: IConversationTracing): SolutionType {
    const solutionMap: { [key: string]: SolutionType } = {
      'voice': SolutionType.vda,
      'chat': SolutionType.whatsapp ?? SolutionType.WebChat,
    }
    return solutionMap[tracing.channel];
  }

  resolveVdnFromTracing(tracing: IConversationTracing): string | undefined {
    return tracing.getEventsByCategory(RogueCategory.Transfer).pop()?.transferTo;
  }
}
