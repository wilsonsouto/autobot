import { {{pascalCaseProjectName}}Factory } from 'factories/{{pascalCaseProjectName}}Factory';
import { {{pascalCaseProjectName}}Atendimento } from 'models/entities/{{camelCaseProjectName}}/{{pascalCaseProjectName}}Atendimento';
import { IConversationTracing } from 'models/interfaces/IConversationTracing';
import {{pascalCaseProjectName}}AtendimentoRepository from 'repositories/{{camelCaseProjectName}}/{{pascalCaseProjectName}}AtendimentoRepository';
import {{pascalCaseProjectName}}EventoRepository from 'repositories/{{camelCaseProjectName}}/{{pascalCaseProjectName}}EventoRepository';
import {{pascalCaseProjectName}}SurveyRepository from 'repositories/{{camelCaseProjectName}}/{{pascalCaseProjectName}}SurveyRepository';
import Logger from 'utils/Logger';

class {{pascalCaseProjectName}}Service {
  private name = '{{pascalCaseProjectName}}Service';

  public async consumeTracing(tracing: IConversationTracing) {
    try {
      const cdrFactory = new {{pascalCaseProjectName}}Factory();

      const atendimentoEvent = cdrFactory.makeAtendimento(tracing);
      const cdrEvents = cdrFactory.makeEvents(tracing);
      const surveys = cdrFactory.makeSurveys(tracing);

      Logger.info(`[${this.name}][${tracing.conversationId}] AtendimentoObject `, atendimentoEvent);
      Logger.info(`[${this.name}][${tracing.conversationId}] ${cdrEvents.length} CdrEvents captured`);

      await {{pascalCaseProjectName}}AtendimentoRepository.insert(atendimentoEvent);
      await Promise.all(cdrEvents.map(async cdrEvent => {{pascalCaseProjectName}}EventoRepository.insert(cdrEvent)));
      await Promise.all(surveys.map(async survey => {{pascalCaseProjectName}}SurveyRepository.insert(survey)));

      Logger.info(`[${tracing.conversationId}] Sucessfully inserted record into ${{{pascalCaseProjectName}}Atendimento.name}!`);
    } catch (exception) {
      const exceptionError = exception as Error;
      if (!/Duplicate entry/.test(exceptionError.toString())) {
        Logger.error(`[${this.name}] (${tracing.conversationId}) - Exception while trying to insert into database:  `, exceptionError);
        throw exceptionError;
      }
      Logger.error(`[${this.name}] (${tracing.conversationId}) - Duplicate entry.`);
    }
  }
}

export default new {{pascalCaseProjectName}}Service();
